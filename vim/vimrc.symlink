" specify the plugin dir
call plug#begin('~/.vim/plugged')


" make sure to use single quotes
Plug 'junegunn/vim-easy-align'
" Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-github-dashboard'
Plug 'leafgarland/typescript-vim'
Plug 'dense-analysis/ale'
Plug 'prettier/vim-prettier', { 'do': 'yarn install', 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'markdown', 'vue', 'yaml', 'html'] }
Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'godlygeek/tabular'
Plug 'tpope/vim-surround'
Plug 'terryma/vim-multiple-cursors'
Plug 'neoclide/coc.nvim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'ludovicchabant/vim-gutentags'
"
call plug#end()
"*****************************************************************************
"" Basic Setup
"*****************************************************************************"
"" Encoding
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8
set bomb
set binary
set ttyfast
"
"" Fix backspace indent
set backspace=indent,eol,start

" faster scroll when syntax on
set lazyredraw

"" Tabs. May be overriten by autocmd rules
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab

"" Map leader to [space]
let mapleader=' '

"" Enable hidden buffers
set hidden

"" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase
" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if (&t_Co > 2 || has("gui_running")) && !exists("syntax_on")
  syntax on
  set hlsearch
endif

"Always display the status line
set laststatus=2

"" Directories for swp files
set nobackup
set noswapfile

set fileformats=unix,dos,mac
set showcmd

" splits
set splitbelow
set splitright

" Switch wrap off for everything
set nowrap

"*****************************************************************************
"" Visual Settings
"*****************************************************************************
set ruler
set number
set relativenumber
set conceallevel=1

let no_buffers_menu=1

if filereadable(expand("~/.vimrc_background"))
  let base16colorspace=256
  source ~/.vimrc_background
endif

" remove line number background
highlight LineNr ctermbg=NONE

"*****************************************************************************
"" Autocmds
"*****************************************************************************
" Only do this part when compiled with support for autocommands.
if has("autocmd")
  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Set File type to 'text' for files ending in .txt
  autocmd BufNewFile,BufRead *.txt setfiletype text

  " Enable soft-wrapping for text files
  autocmd FileType text,markdown,html,xhtml,eruby setlocal wrap linebreak nolist

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  " autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  " Automatically load .vimrc source when saved
  autocmd BufWritePost .vimrc source $MYVIMRC

  augroup END

else
  set autoindent		" always set autoindenting on
endif " has("autocmd")

"*****************************************************************************
"" Airline settings
"*****************************************************************************
let g:airline#extensions#tabline#enabled = 1


"*****************************************************************************
"" gutentags for method finding
"*****************************************************************************
let g:gutentags_ctags_exclude = ["node_module"]

"*****************************************************************************
"" Mappings
"*****************************************************************************

" Ale
highlight ALEErrorSign ctermfg=9
let g:ale_sign_error = '✖'
let g:ale_sign_warning = '⚠'
"fixers
let g:ale_fixers = {
			\ '*': ['remove_trailing_lines', 'trim_whitespace'],
			\ 'javascript': ['eslint'],
			\ 'typescript': ['prettier'],
      \ 'scss': ['prettier'],
      \ 'html': ['prettier']
			\}
let g:ale_fix_on_save=1
"linters
let g:ale_linters = {
      \'javascript': ['eslint'],
      \'typescript': ['tsserver', 'tslint'],
      \'rust': ['rls', 'cargo']
\}
let g:ale_lint_on_text_changed = 'never'
noremap <Leader>lf :ALEFix<CR>
"
" Stop concealing quotes in JSON
let g:vim_json_syntax_conceal = 0
"
"" Prettier
let g:prettier#autoformat = 0
"autocmd FileType typescript setlocal formatprg=prettier\ --parser\ typescript
"
"autocomplete
let g:ale_completion_enabled=1

"" key mappings
source $HOME/.dotfiles/vim/keys.vim

" Display matching files on tab complete
set wildmenu
" Ignore node_modules and images from search results
set wildignore+=**/node_modules/**,**/dist/**,**_site/**,*.swp,*.png,*.jpg,*.gif,*.webp,*.jpeg,*.map
" Search all subfolders
set path+=**
" Use the system register for all cut yank and paste operations
" Automatically remove the preview window after autocompletion
set clipboard=unnamedplus
autocmd CompleteDone * pclose
"
"toggle numbering when in insertmode, and normal mode
:augroup numbertoggle
:  autocmd!
:  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
:  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
:augroup END

" Rainbow.vim
 let g:rainbow_active = 1

"*****************************************************************************
"" Language configs
"*****************************************************************************

"prettier
autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue,*.yaml,*.html PrettierAsync
"
"
" show tabs and trailling spaces
set list listchars=tab:→\ ,trail:·
